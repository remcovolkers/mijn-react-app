/**
 * ApiGeneratedChatGPT35
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";

/**
 * The ArticleDto model module.
 * @module model/ArticleDto
 * @version 1.0
 */
class ArticleDto {
  /**
   * Constructs a new <code>ArticleDto</code>.
   * @alias module:model/ArticleDto
   */
  constructor() {
    ArticleDto.initialize(this);
  }

  /**
   * Initializes the fields of this object.
   * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
   * Only for internal use.
   */
  static initialize(obj) {}

  /**
   * Constructs a <code>ArticleDto</code> from a plain JavaScript object, optionally creating a new instance.
   * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @param {module:model/ArticleDto} obj Optional instance to populate.
   * @return {module:model/ArticleDto} The populated <code>ArticleDto</code> instance.
   */
  static constructFromObject(data, obj) {
    if (data) {
      obj = obj || new ArticleDto();

      if (data.hasOwnProperty("id")) {
        obj["id"] = ApiClient.convertToType(data["id"], "Number");
      }
      if (data.hasOwnProperty("title")) {
        obj["title"] = ApiClient.convertToType(data["title"], "String");
      }
      if (data.hasOwnProperty("content")) {
        obj["content"] = ApiClient.convertToType(data["content"], "String");
      }
    }
    return obj;
  }

  /**
   * Validates the JSON data with respect to <code>ArticleDto</code>.
   * @param {Object} data The plain JavaScript object bearing properties of interest.
   * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ArticleDto</code>.
   */
  static validateJSON(data) {
    // ensure the json data is a string
    if (
      data["title"] &&
      !(typeof data["title"] === "string" || data["title"] instanceof String)
    ) {
      throw new Error(
        "Expected the field `title` to be a primitive type in the JSON string but got " +
          data["title"],
      );
    }
    // ensure the json data is a string
    if (
      data["content"] &&
      !(
        typeof data["content"] === "string" || data["content"] instanceof String
      )
    ) {
      throw new Error(
        "Expected the field `content` to be a primitive type in the JSON string but got " +
          data["content"],
      );
    }

    return true;
  }
}

/**
 * @member {Number} id
 */
ArticleDto.prototype["id"] = undefined;

/**
 * @member {String} title
 */
ArticleDto.prototype["title"] = undefined;

/**
 * @member {String} content
 */
ArticleDto.prototype["content"] = undefined;

export default ArticleDto;
