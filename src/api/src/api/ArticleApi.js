/**
 * ApiGeneratedChatGPT35
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from "../ApiClient";
import ArticleCreateDto from "../model/ArticleCreateDto";
import ArticleDto from "../model/ArticleDto";
import ArticleUpdateDto from "../model/ArticleUpdateDto";

/**
 * Article service.
 * @module api/ArticleApi
 * @version 1.0
 */
export default class ArticleApi {
  /**
   * Constructs a new ArticleApi.
   * @alias module:api/ArticleApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  constructor(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;
  }

  /**
   * Callback function to receive the result of the apiArticlesGet operation.
   * @callback module:api/ArticleApi~apiArticlesGetCallback
   * @param {String} error Error message, if any.
   * @param {Array.<module:model/ArticleDto>} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {module:api/ArticleApi~apiArticlesGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link Array.<module:model/ArticleDto>}
   */
  apiArticlesGet(callback) {
    let postBody = null;

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["text/plain", "application/json", "text/json"];
    let returnType = [ArticleDto];
    return this.apiClient.callApi(
      "/api/articles",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the apiArticlesIdDelete operation.
   * @callback module:api/ArticleApi~apiArticlesIdDeleteCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Number} id
   * @param {module:api/ArticleApi~apiArticlesIdDeleteCallback} callback The callback function, accepting three arguments: error, data, response
   */
  apiArticlesIdDelete(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling apiArticlesIdDelete",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/articles/{id}",
      "DELETE",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the apiArticlesIdGet operation.
   * @callback module:api/ArticleApi~apiArticlesIdGetCallback
   * @param {String} error Error message, if any.
   * @param {module:model/ArticleDto} data The data returned by the service call.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Number} id
   * @param {module:api/ArticleApi~apiArticlesIdGetCallback} callback The callback function, accepting three arguments: error, data, response
   * data is of type: {@link module:model/ArticleDto}
   */
  apiArticlesIdGet(id, callback) {
    let postBody = null;
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling apiArticlesIdGet",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = [];
    let accepts = ["text/plain", "application/json", "text/json"];
    let returnType = ArticleDto;
    return this.apiClient.callApi(
      "/api/articles/{id}",
      "GET",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the apiArticlesIdPut operation.
   * @callback module:api/ArticleApi~apiArticlesIdPutCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Number} id
   * @param {Object} opts Optional parameters
   * @param {module:model/ArticleUpdateDto} [articleUpdateDto]
   * @param {module:api/ArticleApi~apiArticlesIdPutCallback} callback The callback function, accepting three arguments: error, data, response
   */
  apiArticlesIdPut(id, opts, callback) {
    opts = opts || {};
    let postBody = opts["articleUpdateDto"];
    // verify the required parameter 'id' is set
    if (id === undefined || id === null) {
      throw new Error(
        "Missing the required parameter 'id' when calling apiArticlesIdPut",
      );
    }

    let pathParams = {
      id: id,
    };
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json", "text/json", "application/*+json"];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/articles/{id}",
      "PUT",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }

  /**
   * Callback function to receive the result of the apiArticlesPost operation.
   * @callback module:api/ArticleApi~apiArticlesPostCallback
   * @param {String} error Error message, if any.
   * @param data This operation does not return a value.
   * @param {String} response The complete HTTP response.
   */

  /**
   * @param {Object} opts Optional parameters
   * @param {module:model/ArticleCreateDto} [articleCreateDto]
   * @param {module:api/ArticleApi~apiArticlesPostCallback} callback The callback function, accepting three arguments: error, data, response
   */
  apiArticlesPost(opts, callback) {
    opts = opts || {};
    let postBody = opts["articleCreateDto"];

    let pathParams = {};
    let queryParams = {};
    let headerParams = {};
    let formParams = {};

    let authNames = [];
    let contentTypes = ["application/json", "text/json", "application/*+json"];
    let accepts = [];
    let returnType = null;
    return this.apiClient.callApi(
      "/api/articles",
      "POST",
      pathParams,
      queryParams,
      headerParams,
      formParams,
      postBody,
      authNames,
      contentTypes,
      accepts,
      returnType,
      null,
      callback,
    );
  }
}
